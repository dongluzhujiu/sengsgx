/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* sgx_tssl.edl - Top EDL file. */

enclave {
    
    from "sgx_tstdc.edl" import *;
    
    untrusted {
    	 void u_sgxssl_ftime([out, size=timeb_len] void * timeptr, uint32_t timeb_len) transition_using_threads;

         long u_direct_write (int fd, [in, size=count] const void *buf, size_t count) propagate_errno transition_using_threads;
         long u_direct_read (int fd, [user_check] void *buf, size_t count) propagate_errno transition_using_threads;

         long u_direct_recv (int sockfd, [user_check] void *buf, size_t count, int flags) propagate_errno transition_using_threads;

         int u_direct_setsockopt(int sockfd, int level, int optname, [in, size=optlen] const void *optval, unsigned int optlen) propagate_errno;

         //int u_direct_getsockopt(int sockfd, int level, int optname, [user_check] void *optval, [in, out] unsigned int *optlen) propagate_errno;
         // temporary hacky workaround
         int u_hacky_direct_getsockopt(int sockfd, int level, int optname, [in, out, size=optlen] void *optval, unsigned int optlen, [in, out] unsigned int *res_optlen) propagate_errno;

         int u_hacky_direct_getsockname(int sockfd, [in, out, size=addrlen] void *addr, unsigned int addrlen, [in, out] unsigned int *res_addrlen) propagate_errno;
    };

    trusted {

    };
};
